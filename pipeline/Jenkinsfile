pipeline{
    environment { // Declaration of environment variables
        DOCKER_ID = "axdeo" // replace this with your docker-id
        DOCKER_TAG = "v.${BUILD_ID}.0" // we will tag our images with the current build in order to increment the value by 1 with each new build
        NP_DEV = 32000
        NP_TEST = 32001
        NP_QA = 32002
        NP_PROD = 32003    
    }

    agent any
    stages{

        stage('run dockercompose'){
            steps{
                script{
                sh '''
                  docker-compose up -d
                '''
                }
            }
        }

        stage('test dockercompose') {
            steps{
                script{
                sh '''
                curl -I GET http://localhost:8080/api/v1/movies/docs 
                curl -I  GET http://localhost:8080/api/v1/casts/docs
                '''
                }
            }
        }

        stage('Docker Build movie-service'){
            environment
            {
                DOCKER_IMAGE = "movie-service"
            }

            steps {
                script {
                sh '''
                cd $DOCKER_IMAGE/
                docker build -t $DOCKER_ID/$DOCKER_IMAGE:$DOCKER_TAG .
                '''
                }
            }

        }

        stage('Docker Build  cast-service'){
            environment
            {
                DOCKER_IMAGE = "cast-service"
            }

            steps {
                script {
                sh '''
                cd $DOCKER_IMAGE/
                docker build -t $DOCKER_ID/$DOCKER_IMAGE:$DOCKER_TAG .
                '''
                }
            }

        }

        stage('Docker Push cast-service'){
            environment
            {
                DOCKER_PASS = credentials("DOCKER_HUB_PASS")
                DOCKER_IMAGE = "cast-service"
            }

            steps {
                script {
                sh '''
                cd $DOCKER_IMAGE/
                docker login -u $DOCKER_ID -p $DOCKER_PASS
                docker push $DOCKER_ID/$DOCKER_IMAGE:$DOCKER_TAG
                '''
                }
            }

        }

        stage('Docker Push movie-service'){
            environment
            {
                DOCKER_PASS = credentials("DOCKER_HUB_PASS")
                DOCKER_IMAGE = "movie-service"
            }

            steps {
                script {
                sh '''
                cd $DOCKER_IMAGE/
                docker login -u $DOCKER_ID -p $DOCKER_PASS
                docker push $DOCKER_ID/$DOCKER_IMAGE:$DOCKER_TAG
                '''
                }
            }

        }

        stage('Deploiement en dev'){
            environment
            {
                KUBECONFIG = credentials("config") // we retrieve  kubeconfig from secret file called config saved on jenkins
            }
            steps {
                script {
                sh '''
                rm -Rf .kube
                mkdir .kube
                ls
                cat $KUBECONFIG > .kube/config
                cd ./K8S/cast-service/
                cat values.yaml
                sed -i "s+tag.*+tag: ${DOCKER_TAG}+g" values.yaml
                helm upgrade --install cast-service . --values=values.yaml --namespace dev
                cd ../movie-service/
                cat values.yaml
                sed -i "s+tag.*+tag: ${DOCKER_TAG}+g" values.yaml
                helm upgrade --install movie-service . --values=values.yaml --namespace dev
                cd ../nginx/
                cat values.yaml
                helm upgrade --install nginx . --values=values.yaml --namespace dev --set service.NodePort=$NP_DEV
                helm upgrade --install movie-db oci://registry-1.docker.io/bitnamicharts/postgresql \
                --namespace staging \
                --set global.postgresql.auth.postgresPassword=admin \
                --set global.postgresql.auth.username=movie \
                --set global.postgresql.auth.password=moviepassword \
                --set global.postgresql.auth.database=moviedb \
                --set livenessProbe.initialDelaySeconds=100 \
                --set readinessProbe.initialDelaySeconds=100
                helm upgrade --install cast-db oci://registry-1.docker.io/bitnamicharts/postgresql \
                --namespace staging \
                --set global.postgresql.auth.postgresPassword=admin \
                --set global.postgresql.auth.username=cast \
                --set global.postgresql.auth.password=castpassword \
                --set global.postgresql.auth.database=castdb \
                --set livenessProbe.initialDelaySeconds=100 \
                --set readinessProbe.initialDelaySeconds=100

                '''
                }
            }

            }

        stage('Deploiement en staging'){
            environment
            {
                KUBECONFIG = credentials("config") // we retrieve  kubeconfig from secret file called config saved on jenkins
            }
            steps {
                script {
                sh '''
                rm -Rf .kube
                mkdir .kube
                ls
                cat $KUBECONFIG > .kube/config
                cd ./K8S/cast-service/
                cat values.yaml
                sed -i "s+tag.*+tag: ${DOCKER_TAG}+g" values.yaml
                helm upgrade --install cast-service . --values=values.yaml --namespace staging
                cd ../movie-service/
                cat values.yaml
                sed -i "s+tag.*+tag: ${DOCKER_TAG}+g" values.yaml
                helm upgrade --install movie-service . --values=values.yaml --namespace staging
                cd ../nginx/
                cat values.yaml
                helm upgrade --install nginx . --values=values.yaml --namespace staging --set service.NodePort=$NP_STAGING
                helm upgrade --install movie-db oci://registry-1.docker.io/bitnamicharts/postgresql \
                --namespace staging \
                --set global.postgresql.auth.postgresPassword=admin \
                --set global.postgresql.auth.username=movie \
                --set global.postgresql.auth.password=moviepassword \
                --set global.postgresql.auth.database=moviedb \
                --set livenessProbe.initialDelaySeconds=100 \
                --set readinessProbe.initialDelaySeconds=100
                helm upgrade --install cast-db oci://registry-1.docker.io/bitnamicharts/postgresql \
                --namespace staging \
                --set global.postgresql.auth.postgresPassword=admin \
                --set global.postgresql.auth.username=cast \
                --set global.postgresql.auth.password=castpassword \
                --set global.postgresql.auth.database=castdb \
                --set livenessProbe.initialDelaySeconds=100 \
                --set readinessProbe.initialDelaySeconds=100

                '''
                }
            }   

            }

        stage('Deploiement en QA'){
            environment
            {
                KUBECONFIG = credentials("config") // we retrieve  kubeconfig from secret file called config saved on jenkins
            }
            steps {
                script {
                sh '''
                rm -Rf .kube
                mkdir .kube
                ls
                cat $KUBECONFIG > .kube/config
                cd ./K8S/cast-service/
                cat values.yaml
                sed -i "s+tag.*+tag: ${DOCKER_TAG}+g" values.yaml
                helm upgrade --install cast-service . --values=values.yaml --namespace qa
                cd ../movie-service/
                cat values.yaml
                sed -i "s+tag.*+tag: ${DOCKER_TAG}+g" values.yaml
                helm upgrade --install movie-service . --values=values.yaml --namespace qa
                cd ../nginx/
                cat values.yaml
                helm upgrade --install nginx . --values=values.yaml --namespace qa --set service.NodePort=$NP_QA
                helm upgrade --install movie-db oci://registry-1.docker.io/bitnamicharts/postgresql \
                --namespace qa \
                --set global.postgresql.auth.postgresPassword=admin \
                --set global.postgresql.auth.username=movie \
                --set global.postgresql.auth.password=moviepassword \
                --set global.postgresql.auth.database=moviedb \
                --set livenessProbe.initialDelaySeconds=100 \
                --set readinessProbe.initialDelaySeconds=100
                helm upgrade --install cast-db oci://registry-1.docker.io/bitnamicharts/postgresql \
                --namespace qa \
                --set global.postgresql.auth.postgresPassword=admin \
                --set global.postgresql.auth.username=cast \
                --set global.postgresql.auth.password=castpassword \
                --set global.postgresql.auth.database=castdb \
                --set livenessProbe.initialDelaySeconds=100 \
                --set readinessProbe.initialDelaySeconds=100

                '''
                }
            }   

        }


        stage('Deploiement en prod'){
            environment
            {
                KUBECONFIG = credentials("config") // we retrieve  kubeconfig from secret file called config saved on jenkins
            }
            steps {
            // Create an Approval Button with a timeout of 15minutes.
            // this require a manuel validation in order to deploy on production environment
                timeout(time: 15, unit: "MINUTES") {
                    input message: 'Do you want to deploy in production ?', ok: 'Yes'
                    }

                script {
                    sh '''
                    rm -Rf .kube
                    mkdir .kube
                    ls
                    cat $KUBECONFIG > .kube/config
                    cd ./K8S/cast-service/
                    cat values.yaml
                    sed -i "s+tag.*+tag: ${DOCKER_TAG}+g" values.yaml
                    helm upgrade --install cast-service . --values=values.yaml --namespace prod
                    cd ../movie-service/
                    cat values.yaml
                    sed -i "s+tag.*+tag: ${DOCKER_TAG}+g" values.yaml
                    helm upgrade --install movie-service . --values=values.yaml --namespace prod
                    cd ../nginx/
                    cat values.yaml
                    helm upgrade --install nginx . --values=values.yaml --namespace prod --set service.NodePort=$NP_PROD
                    helm upgrade --install movie-db oci://registry-1.docker.io/bitnamicharts/postgresql \
                    --namespace prod \
                    --set global.postgresql.auth.postgresPassword=admin \
                    --set global.postgresql.auth.username=movie \
                    --set global.postgresql.auth.password=moviepassword \
                    --set global.postgresql.auth.database=moviedb \
                    --set livenessProbe.initialDelaySeconds=100 \
                    --set readinessProbe.initialDelaySeconds=100
                    helm upgrade --install cast-db oci://registry-1.docker.io/bitnamicharts/postgresql \
                    --namespace prod \
                    --set global.postgresql.auth.postgresPassword=admin \
                    --set global.postgresql.auth.username=cast \
                    --set global.postgresql.auth.password=castpassword \
                    --set global.postgresql.auth.database=castdb \
                    --set livenessProbe.initialDelaySeconds=100 \
                    --set readinessProbe.initialDelaySeconds=100

                '''
                }
                }
            }


    }
}
